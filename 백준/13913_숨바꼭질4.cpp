/*
문제
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고,
동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 
만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 
순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.
수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

입력
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.
5 17

5 17
출력
첫째 줄에 수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.
둘째 줄에 어떻게 이동해야 하는지 공백으로 구분해 출력한다.
4
5 10 9 18 17

4
5 4 8 16 17
*/
#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>
#define MAX 100001
using namespace std;
int N, K, visit[MAX],parent[MAX];
queue<int> q;
vector<int> v;
int bfs(int n, int k) {
	visit[n] = true;
	q.push(n);
	int time = 0;
	while (!q.empty()) {
		int siz = q.size();
		while(siz--) {
			int position = q.front();
			q.pop();

			if (position == k) {
				int tmp = position;
				while (tmp != n) {
					v.push_back(tmp);
					tmp = parent[tmp];
				}
				v.push_back(n);
				return time;
			}
			
			if (position * 2 < MAX && !visit[position * 2]) {
				visit[position * 2] = true;
				parent[position * 2] = position;
				q.push(position * 2);
			}
			if (position + 1 < MAX && !visit[position + 1]) {
				visit[position + 1] = true;
				parent[position + 1] = position;
				q.push(position + 1);
			}
			if (position - 1 >= 0 && !visit[position - 1]) {
				visit[position - 1] = true;
				parent[position - 1] = position;
				q.push(position - 1);
			}
		}
		time++;
	}
}
int main() {
	scanf("%d %d", &N, &K);
	printf("%d\n", bfs(N, K));
	reverse(v.begin(), v.end());
	for (int i = 0; i < v.size(); i++)
		printf("%d ", v[i]);
	printf("\n");
	return 0;
}